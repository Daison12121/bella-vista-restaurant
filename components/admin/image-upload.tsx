"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Upload, X, ImageIcon, AlertCircle, CheckCircle, Info, Loader2, Settings } from "lucide-react"

interface ImageUploadProps {
  value: string
  onChange: (url: string) => void
}

interface BlobStatus {
  configured: boolean
  tokenExists: boolean
  tokenLength: number
  tokenPrefix: string
  environment: string
}

export function ImageUpload({ value, onChange }: ImageUploadProps) {
  const [isUploading, setIsUploading] = useState(false)
  const [message, setMessage] = useState("")
  const [messageType, setMessageType] = useState<"error" | "warning" | "success">("error")
  const [uploadProgress, setUploadProgress] = useState(0)
  const [blobStatus, setBlobStatus] = useState<BlobStatus | null>(null)
  const [showDiagnostics, setShowDiagnostics] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Blob –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    checkBlobStatus()
  }, [])

  const checkBlobStatus = async () => {
    try {
      const response = await fetch("/api/blob-status")
      const status = await response.json()
      setBlobStatus(status)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Blob:", error)
    }
  }

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith("image/")) {
      setMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, WebP)")
      setMessageType("error")
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setMessage("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB")
      setMessageType("error")
      return
    }

    setIsUploading(true)
    setMessage("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    setMessageType("success")
    setUploadProgress(0)

    try {
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const formData = new FormData()
      formData.append("file", file)

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
      const progressInterval = setInterval(() => {
        setUploadProgress((prev) => Math.min(prev + 10, 90))
      }, 200)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API route
      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      })

      clearInterval(progressInterval)
      setUploadProgress(100)

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
      }

      onChange(data.url)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (data.isPlaceholder) {
        setMessage(data.message || "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        setMessageType("warning")
      } else {
        const sizeInMB = (data.size / 1024 / 1024).toFixed(2)
        setMessage(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Vercel Blob (${sizeInMB}MB)`)
        setMessageType("success")
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error)
      setMessage(error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
      setMessageType("error")
    } finally {
      setIsUploading(false)
      setUploadProgress(0)
    }
  }

  const handleRemove = () => {
    onChange("")
    setMessage("")
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const handleUsePlaceholder = () => {
    const placeholderUrl = `/placeholder.svg?height=400&width=600&text=${encodeURIComponent("–ë–ª—é–¥–æ")}`
    onChange(placeholderUrl)
    setMessage("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    setMessageType("warning")
  }

  const getMessageIcon = () => {
    if (isUploading) return <Loader2 className="w-4 h-4 animate-spin" />

    switch (messageType) {
      case "error":
        return <AlertCircle className="w-4 h-4" />
      case "warning":
        return <Info className="w-4 h-4" />
      case "success":
        return <CheckCircle className="w-4 h-4" />
      default:
        return <Info className="w-4 h-4" />
    }
  }

  const getMessageColor = () => {
    switch (messageType) {
      case "error":
        return "text-red-600 bg-red-50 border-red-200"
      case "warning":
        return "text-amber-600 bg-amber-50 border-amber-200"
      case "success":
        return "text-green-600 bg-green-50 border-green-200"
      default:
        return "text-blue-600 bg-blue-50 border-blue-200"
    }
  }

  return (
    <div className="space-y-4">
      <input ref={fileInputRef} type="file" accept="image/*" onChange={handleFileSelect} className="hidden" />

      {value ? (
        <div className="relative group">
          <img
            src={value || "/placeholder.svg"}
            alt="Uploaded"
            className="w-full h-48 object-cover rounded-lg transition-all duration-300 group-hover:brightness-75"
          />
          <Button
            type="button"
            variant="destructive"
            size="sm"
            className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
            onClick={handleRemove}
          >
            <X className="w-4 h-4" />
          </Button>

          {/* Overlay —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
          <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
            <div className="text-white text-center">
              <p className="text-sm font-medium">–ù–∞–∂–º–∏—Ç–µ X —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å</p>
              <p className="text-xs opacity-75">–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>
            </div>
          </div>
        </div>
      ) : (
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-orange-300 transition-colors">
          <ImageIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600 mb-4">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞</p>
          <div className="flex flex-col gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => fileInputRef.current?.click()}
              disabled={isUploading}
              className="relative"
            >
              {isUploading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –ó–∞–≥—Ä—É–∑–∫–∞ {uploadProgress}%
                </>
              ) : (
                <>
                  <Upload className="w-4 h-4 mr-2" />
                  –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                </>
              )}
            </Button>

            <Button type="button" variant="ghost" size="sm" onClick={handleUsePlaceholder} className="text-gray-500">
              –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å placeholder
            </Button>
          </div>
        </div>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
      {isUploading && uploadProgress > 0 && (
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-orange-500 h-2 rounded-full transition-all duration-300"
            style={{ width: `${uploadProgress}%` }}
          ></div>
        </div>
      )}

      {message && (
        <div className={`flex items-center gap-2 text-sm p-3 rounded-lg border ${getMessageColor()}`}>
          {getMessageIcon()}
          <span>{message}</span>
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å Vercel Blob */}
      <div className="space-y-2">
        {blobStatus && (
          <div
            className={`p-3 rounded-lg border ${
              blobStatus.configured
                ? "bg-green-50 border-green-200 text-green-800"
                : "bg-red-50 border-red-200 text-red-800"
            }`}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                {blobStatus.configured ? <CheckCircle className="w-4 h-4" /> : <AlertCircle className="w-4 h-4" />}
                <span className="font-medium">Vercel Blob: {blobStatus.configured ? "–ù–∞—Å—Ç—Ä–æ–µ–Ω" : "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}</span>
              </div>
              <Button type="button" variant="ghost" size="sm" onClick={() => setShowDiagnostics(!showDiagnostics)}>
                <Settings className="w-4 h-4" />
              </Button>
            </div>

            {showDiagnostics && (
              <div className="mt-2 text-xs space-y-1 font-mono bg-white/50 p-2 rounded">
                <div>–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {blobStatus.tokenExists ? "‚úÖ" : "‚ùå"}</div>
                <div>–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {blobStatus.tokenLength}</div>
                <div>–ü—Ä–µ—Ñ–∏–∫—Å: {blobStatus.tokenPrefix}</div>
                <div>–û–∫—Ä—É–∂–µ–Ω–∏–µ: {blobStatus.environment}</div>
              </div>
            )}
          </div>
        )}

        {!blobStatus?.configured && (
          <div className="bg-blue-50 border border-blue-200 rounded p-3">
            <p className="font-medium text-blue-800 mb-2">üîß –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Vercel Blob:</p>
            <ol className="text-blue-700 text-sm space-y-1 list-decimal list-inside">
              <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Vercel Dashboard ‚Üí Storage</li>
              <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Blob Store</li>
              <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ Read-Write Token</li>
              <li>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BLOB_READ_WRITE_TOKEN</li>
              <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
            </ol>
            <Button type="button" variant="outline" size="sm" className="mt-2 bg-transparent" onClick={checkBlobStatus}>
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        )}

        <div className="text-xs text-gray-500">
          <div className="bg-gray-50 border border-gray-200 rounded p-2">
            <p className="font-medium mb-1">üì∏ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</p>
            <p>JPG, PNG, WebP ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10MB ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</p>
          </div>
        </div>
      </div>
    </div>
  )
}
